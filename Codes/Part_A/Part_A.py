# -*- coding: utf-8 -*-
"""RF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14yYPb4KYaX8XfUWbYS1LvpVrbSP8VlMT
"""

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('TrainingDataBinary.csv')
X = dataset.iloc[:, :-13].values
y = dataset.iloc[:, -1].values
print(X)
print(y)

# Splitting the dataset into the Training set and Test set 
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.15, random_state = 0)
print(X_train)
print(y_train)
print(X_test)
print(y_test)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
print(X_train)
print(X_test)

# Training the Random Forest Classification model on the Training set
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators= 100,criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)

# Training accuracy and F1 Score to check the accuracy of model on training set
from sklearn.metrics import f1_score, accuracy_score
y_pred_training=classifier.predict(X_train)
accuracyscore=accuracy_score(y_train, y_pred_training)
print('Accuracy Score on training set is '+ str(accuracyscore))
print('F1 score of Training set is ' + str(f1_score(y_train, y_pred_training, average='macro')))

# Predicting the Test set results
y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

# Simple confusion Matrix and accuracy on test set
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
AS_test = accuracy_score(y_test, y_pred)
print('Accuracy Score on testing set is '+ str(AS_test))

#calculating the F1 score of test set 
from sklearn.metrics import f1_score
print('F1 score of Testing set is ' + str(f1_score(y_test, y_pred, average='macro')))

#Confusion Matrix Diagram
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0, 1])
disp.plot()
plt.show()

#Predicting the results for actual testing data (TestingDataBinary.CSV) 
new_data = pd.read_csv('TestingDataBinary.csv',header=None)
new_data1 = new_data.iloc[:, :-12].values
new_data1 = sc.transform(new_data1)
print(new_data1)
predictions = classifier.predict(new_data1)
print(predictions)
new_data['predictions'] = predictions
new_data.to_csv('TestingResultsBinary.csv', index=False, header=False) # creating a new file with input parameters and predicted results

