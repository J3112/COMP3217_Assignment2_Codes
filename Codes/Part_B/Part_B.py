# -*- coding: utf-8 -*-
"""modelselection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mZrg4lEKulgQopcxOrWWBeKHs8vtgG4Q
"""

#importing libraries 
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#loading the csv to pandas dataframe
dataset = pd.read_csv('TrainingDataMulti.csv')
X = dataset.iloc[:, :-13].values
y = dataset.iloc[:, -1].values
print(X)
print(y)

#Train and Test Split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.15, random_state = 0)
print(X_train)
print(y_train)
print(X_test)
print(y_test)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
print(X_train)
print(X_test)

# Check all the models from scikit learn and check the accuracy on the given dataset to check performance of each model on given dataset  
from sklearn.metrics import accuracy_score
from sklearn.utils import all_estimators



# Get a list of all available models
all_models = all_estimators(type_filter='classifier')

best_model = None
best_accuracy = 0

# Iterate over all available models and evaluate their performance
for name, ModelClass in all_models:
    try:
        model = ModelClass()
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)

        print(f"Model: {name}")
        print(f"Accuracy: {accuracy}")
        print()

        # Update the best model if the current model performs better
        if accuracy > best_accuracy:
            best_model = model
            best_accuracy = accuracy
    except Exception as e:
        print(f"Error evaluating {name}: {str(e)}")
        print()

# Use the best model for predictions
y_pred = best_model.predict(X_test)
final_accuracy = accuracy_score(y_test, y_pred)
print("Best Model:")
print(best_model)
print(f"Final Accuracy: {final_accuracy}")

# Create a Extra Tress classifier and check the accuracy on the given data 
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.metrics import accuracy_score, f1_score
# Instantiate and fit the ExtraTreesClassifier
model = ExtraTreesClassifier(n_estimators= 100, criterion = 'log_loss', random_state = 0)
model.fit(X_train, y_train)

# Make predictions on the train set
y_pred_train = model.predict(X_train)

# Evaluate the model's accuracy on train set
accuracy_train = accuracy_score(y_train, y_pred_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model's accuracy on test set
accuracy_test = accuracy_score(y_test, y_pred)

# Training accuracy and F1 Score to check the accuracy of model on training set

print('Accuracy Score on training set is '+ str(accuracy_train))
print('F1 score of Training set is ' + str(f1_score(y_train, y_pred_train, average='macro')))

# Training accuracy and F1 Score to check the accuracy of model on testing set

print('Accuracy Score on testing set is '+ str(accuracy_test))
print('F1 score of Testing set is ' + str(f1_score(y_test, y_pred, average='macro')))

# Creating confusion matrix
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0, 1, 2])
disp.plot()
plt.show()

# (Test Model1)Few more models to check the performance(GradientBoostingClassifier)
from sklearn.ensemble import GradientBoostingClassifier
# Instantiate and fit the GradientBoostingClassifier
model1 = GradientBoostingClassifier()
model1.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model1.predict(X_test)

# Evaluate the model's accuracy
accuracy = accuracy_score(y_test, y_pred)

# Print the accuracy
print(f"Accuracy: {accuracy}")

#(Test Model 2)Few more models to check the performance(BaggingClassifier)
from sklearn.ensemble import BaggingClassifier
# Instantiate and fit the BaggingClassifier
model2 = BaggingClassifier()
model2.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model2.predict(X_test)

# Evaluate the model's accuracy
accuracy = accuracy_score(y_test, y_pred)

# Print the accuracy
print(f"Accuracy: {accuracy}")

#Using the model with Highest accuracy(Extra Tress Classifier) To predict on testing data 
new_data = pd.read_csv('TestingDataMulti.csv',header=None)
new_data1 = new_data.iloc[:, :-12].values
new_data1 = sc.transform(new_data1)
print(new_data1)
predictions = model.predict(new_data1)
print(predictions)
new_data['predictions'] = predictions
new_data.to_csv('TestingResultsMulti.csv', index=False, header=False)